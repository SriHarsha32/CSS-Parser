/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Tester;
import Parser.*;
import Utilities.*;
import Validator.PropertyValueMatch;
import java.awt.*;
import javax.swing.*;
import java.io.*;
import java.util.*;
import java.util.List;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;

public class ParserGUI extends javax.swing.JFrame {
    JFileChooser fileChooser = new JFileChooser();
    Boolean cv=false;
    List<Rule> rules;
    Thread parserThread;
    Thread validateThread;
    
    private LineNumberModelImpl lineNumberModel = new LineNumberModelImpl();
    private LineNumberComponent lineNumberComponent;
    /**
     * Creates new form ParserGUI
     */
    public ParserGUI() {
        initComponents();
        setTitle("CSS Parser and Validator");
        fileText.setText("");
        lineNumberComponent = new LineNumberComponent(lineNumberModel);
        ValidateBtn.setEnabled(false);
        jScrollPane1.setRowHeaderView(lineNumberComponent);
        lineNumberComponent.setAlignment(LineNumberComponent.CENTER_ALIGNMENT);
        fileText.getDocument().addDocumentListener(new DocumentListener(){
            @Override
            public void changedUpdate(DocumentEvent arg0) {
                    lineNumberComponent.adjustWidth();
            }

            @Override
            public void insertUpdate(DocumentEvent arg0) {
                    lineNumberComponent.adjustWidth();
            }

            @Override
            public void removeUpdate(DocumentEvent arg0) {
                    lineNumberComponent.adjustWidth();
            }
        });
    }
    
    public void initialize(String filename){
        processText.setText("Reading file...");
        filePath.setText(filename);
        cv=false;
        String temp;
        ChooseOpenBtn.setText("Choose File");
        try{
            File file = new File(filePath.getText());
            FileReader fileReader = new FileReader(file);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            while((temp=bufferedReader.readLine())!=null){
                fileText.append(temp+"\n");
            }
            ValidateBtn.setEnabled(true);
            processText.setText("File read");
        }
        catch(Exception e){
            errorText.setText(e.toString());
            ValidateBtn.setEnabled(false);
            processText.setText("Nothing");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileText = new javax.swing.JTextArea();
        SelectorTableHolder = new javax.swing.JScrollPane();
        ChooseOpenBtn = new javax.swing.JButton();
        filePath = new javax.swing.JTextField();
        ValidateBtn = new javax.swing.JButton();
        ClearBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        errorText = new javax.swing.JTextArea();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        processText = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        syntaxText = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        validityText = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileText.setColumns(20);
        fileText.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        fileText.setRows(5);
        fileText.setMargin(new java.awt.Insets(2, 5, 2, 2));
        fileText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fileTextKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(fileText);

        ChooseOpenBtn.setText("Choose file");
        ChooseOpenBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseOpenBtnActionPerformed(evt);
            }
        });

        filePath.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                filePathKeyTyped(evt);
            }
        });

        ValidateBtn.setBackground(java.awt.Color.green);
        ValidateBtn.setForeground(java.awt.Color.darkGray);
        ValidateBtn.setText("Validate");
        ValidateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ValidateBtnActionPerformed(evt);
            }
        });

        ClearBtn.setText("Clear");
        ClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearBtnActionPerformed(evt);
            }
        });

        errorText.setColumns(20);
        errorText.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        errorText.setRows(5);
        jScrollPane3.setViewportView(errorText);

        label1.setText("File Path:");

        label2.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label2.setText("Details:");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Selectors");

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setText("Process:");

        processText.setText("Nothing");

        jLabel3.setText("Syntax:");

        syntaxText.setText("Nothing");

        jLabel4.setText("Validity:");

        validityText.setText("Nothing");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(processText)
                .addGap(168, 168, 168)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(syntaxText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validityText)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(processText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(syntaxText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(validityText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ChooseOpenBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ClearBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ValidateBtn))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(SelectorTableHolder)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
            .addComponent(jSeparator1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ChooseOpenBtn)
                        .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ClearBtn)
                        .addComponent(ValidateBtn))
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SelectorTableHolder, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ChooseOpenBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseOpenBtnActionPerformed
        if(cv==false){
            if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                //processText.setText("Opening...");
                filePath.setText(fileChooser.getSelectedFile().getAbsolutePath());
                cv=true;
                ChooseOpenBtn.setText("Read File");
                ValidateBtn.setEnabled(false);
                processText.setText("File Selected");
            }
        }
        else{
            processText.setText("Reading file...");
            cv=false;
            String temp;
            ChooseOpenBtn.setText("Choose File");
            try{
                fileText.setText("");
                errorText.setText("");
                File file = new File(filePath.getText());
                FileReader fileReader = new FileReader(file);
                BufferedReader bufferedReader = new BufferedReader(fileReader);
                while((temp=bufferedReader.readLine())!=null){
                    fileText.append(temp+"\n");
                }
                ValidateBtn.setEnabled(true);
                processText.setText("File read");
            }
            catch(Exception e){
                errorText.setText(e.toString());
                ValidateBtn.setEnabled(false);
                processText.setText("Nothing");
           }
        }
    }//GEN-LAST:event_ChooseOpenBtnActionPerformed

    private void ClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearBtnActionPerformed
        ChooseOpenBtn.setText("Choose File");
        filePath.setText("");
        fileText.setText("");
        errorText.setText("");
        SelectorTableHolder.setViewportView(null);
        processText.setText("Nothing");
        syntaxText.setText("Nothing");
        validityText.setText("Nothing");
        ValidateBtn.setEnabled(false);
        lineNumberComponent.clearErrors();
    }//GEN-LAST:event_ClearBtnActionPerformed

    private void CreateSelectorTable(List<Selector> CSS_Sels){ 
        String col[] = {"Selector","Type","Line No"};
        DefaultTableModel tableModel = new DefaultTableModel(col, 0);
        JTable table = new JTable(tableModel);
        String[] data = new String[3];
        for(Selector s:CSS_Sels){
            data[0] = s.toString();
            data[1] = s.getType();
            data[2] = Integer.toString(s.getLineNo());
            tableModel.addRow(data);
        }
        SelectorTableHolder.setViewportView(table);
    }
    
    private void setErrorLine(int line){
        lineNumberComponent.setErrorHere(line);
        lineNumberComponent.adjustWidth();
    }
    
    private void ValidateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ValidateBtnActionPerformed
        parserThread = new Thread(){
            public void run(){
                lineNumberComponent.clearErrors();
                processText.setText("Parsing document...");
                syntaxText.setText("Parsing...");
                validityText.setText("Waiting...");
                try{       
                    rules=Parser.CSSParser.parse(fileText.getText());
                    //System.out.println(fileText.getText());
                    syntaxText.setText("Valid");
                    List<Selector> allSelectors = new ArrayList<>();
                    for(Rule r:rules){
                        allSelectors.addAll(r.getSelectors());
                    }
                    CreateSelectorTable(allSelectors);
                    
                    // validate all rules
                    processText.setText("Validating document...");
                    validityText.setText("Checking...");
                    List<PropertyValue> allProps = new ArrayList<>();
                    Boolean valid = true;
                    for(Rule r:rules){
                        allProps.addAll(r.getPropertyValues());
                    }
                    for(PropertyValue pv:allProps){
                        if(!pv.isValidPVPair()){
                            valid = false;
                            String error = pv.getLineNo()+": The value \""+pv.getValue()+"\" is not applicable to property \""+pv.getProperty()+"\"\n";
                            int err = pv.getLineNo();
                            setErrorLine(err);
                            errorText.append(error);
                        }
                    }
                    if(valid){
                        validityText.setText("Valid");
                    }
                    else{
                        validityText.setText("Invalid");
                    }
                    processText.setText("Nothing");
                }
                catch(IncorrectFormatException e)
                {
                    errorText.setText("Status: "+e.getErrorMessage()+"\nMessage: "+e.getEMessage()+"\nLine No: "+e.getLineNo()+"\nColumn: "+e.getColumn()+"\n");
                    syntaxText.setText("Invalid");
                    processText.setText("Nothing");
                    validityText.setText("Invalid");
                    int err = e.getLineNo();
                    setErrorLine(err);
                }
                catch(Exception e){
                    errorText.setText("Unknown Exception: "+e.toString()+"\n");
                    syntaxText.setText("Unknown");
                    processText.setText("Nothing");
                    validityText.setText("Invalid");
                }
                
                
            }
        };
        parserThread.start();
    }//GEN-LAST:event_ValidateBtnActionPerformed

    private void filePathKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filePathKeyTyped
        // TODO add your handling code here:
        if(!filePath.getText().equals("")){
            cv=true;
            ChooseOpenBtn.setText("Read File");
            ValidateBtn.setEnabled(false);
        }
        else{
            cv=false;
            ChooseOpenBtn.setText("Choose File");
            ValidateBtn.setEnabled(false);
        }
    }//GEN-LAST:event_filePathKeyTyped

    private void fileTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileTextKeyTyped
        // TODO add your handling code here:
        if(!fileText.getText().equals("")){
            ValidateBtn.setEnabled(true);
        }
        else{
            ValidateBtn.setEnabled(false);
        }
    }//GEN-LAST:event_fileTextKeyTyped

    private class LineNumberModelImpl implements LineNumberModel{
        @Override
        public int getNumberLines() {
            try{
                if(fileText.getText().equals(""))
                    return 1;
                return fileText.getLineCount();
            }catch(Exception e){
                e.printStackTrace();
                return 1;
            }
        }

        @Override
        public Rectangle getLineRect(int line) {
            try{
                return fileText.modelToView(fileText.getLineStartOffset(line));
            }catch(BadLocationException e){
                e.printStackTrace();
                return new Rectangle();
            }
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ChooseOpenBtn;
    private javax.swing.JButton ClearBtn;
    private javax.swing.JScrollPane SelectorTableHolder;
    private javax.swing.JButton ValidateBtn;
    private javax.swing.JTextArea errorText;
    private javax.swing.JTextField filePath;
    private javax.swing.JTextArea fileText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private javax.swing.JLabel processText;
    private javax.swing.JLabel syntaxText;
    private javax.swing.JLabel validityText;
    // End of variables declaration//GEN-END:variables
}
